#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Nov 18, 2019 04:24:57 AM IST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import second_support
import re
import subprocess



def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    second_support.init(root, top)
    root.resizable(0,0)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    second_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def fetch_ip(self):
        p1 = subprocess.run(["ifconfig"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        txt = p1.stdout.decode()
        #print(txt)
        iplist = re.findall(r'inet 172.\d*.\d*.\d*|inet 172.\d*.\d*.\d*',txt)
        ipstr = ''

        for item in iplist:
            ipstr = ipstr + ':' + item
    
        ip = re.findall(r'172.\d*.\d*.\d*|192.\d*.\d*.\d*',ipstr)
        #print(ip[0])
        #print(p1.stderr)
        self.Listbox1.insert(1,ip[0])


    def tcp(self):
        root.destroy()
        subprocess.Popen(['python3','tcpdump.py'])



    def netstat(self):
        root.destroy()
        subprocess.Popen(['python3','netstat.py'])


    def hping(self):
        root.destroy()
        subprocess.Popen(['python3','hping.py'])

    def arp(self):
        root.destroy()
        subprocess.Popen(['python3','arp.py'])

    def nslookup(self):
        root.destroy()
        subprocess.Popen(['python3','nslookup.py'])

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Noto Sans Display} -size 16 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font13 = "-family {Noto Sans Display} -size 14 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"
        font14 = "-family {Noto Sans Display} -size 10 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font15 = "-family {Noto Sans Display} -size 22 -weight bold "  \
            "-slant roman -underline 1 -overstrike 0"

        top.geometry("898x630+199+78")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1, 1)
        top.title("Dashboard")
        top.configure(background="#000000")
        top.configure(highlightbackground="#050505")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.212, rely=0.032, height=85, width=571)
        self.Label1.configure(background="#000000")
        self.Label1.configure(font=font15)
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''Dashboard for Security Analysis Tools''')

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.457, rely=0.19, height=40, width=96)
        self.Button1.configure(activebackground="#ffffff")
        self.Button1.configure(background="#000000")
        self.Button1.configure(font=font11)
        self.Button1.configure(foreground="#f9f9f9")
        self.Button1.configure(text='''Fetch IP''')
        self.Button1.configure(command=self.fetch_ip)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.267, rely=0.349, height=30, width=424)
        self.Label2.configure(background="#000000")
        self.Label2.configure(font=font11)
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(text='''|----------- Available Networking Tools -----------|''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg='#000000',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.067, rely=0.492, height=40, width=73)
        self.Button2.configure(background="#000000")
        self.Button2.configure(font=font13)
        self.Button2.configure(foreground="#ffffff")
        self.Button2.configure(text='''A.R.P''')
        self.Button2.configure(command=self.arp)

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.place(relx=0.423, rely=0.27, relheight=0.057
                , relwidth=0.183)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(font=font11)

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.234, rely=0.492, height=40, width=111)
        self.Button3.configure(background="#000000")
        self.Button3.configure(font=font13)
        self.Button3.configure(foreground="#ffffff")
        self.Button3.configure(text='''TCPdump''')
        self.Button3.configure(command=self.tcp)

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.434, rely=0.492, height=40, width=98)
        self.Button4.configure(background="#020202")
        self.Button4.configure(font=font13)
        self.Button4.configure(foreground="#ffffff")
        self.Button4.configure(text='''NetStat''')
        self.Button4.configure(command=self.netstat)

        self.Button5 = tk.Button(top)
        self.Button5.place(relx=0.624, rely=0.492, height=40, width=118)
        self.Button5.configure(background="#050505")
        self.Button5.configure(font=font13)
        self.Button5.configure(foreground="#ffffff")
        self.Button5.configure(text='''NSLookup''')
        self.Button5.configure(command=self.nslookup)

        self.Button6 = tk.Button(top)
        self.Button6.place(relx=0.846, rely=0.492, height=40, width=91)
        self.Button6.configure(background="#050505")
        self.Button6.configure(font=font13)
        self.Button6.configure(foreground="#ffffff")
        self.Button6.configure(text='''HPing3''')
        self.Button6.configure(command=self.hping)

        self.Message1 = tk.Message(top)
        self.Message1.place(relx=0.022, rely=0.603, relheight=0.325
                , relwidth=0.18)
        self.Message1.configure(background="#000000")
        self.Message1.configure(font=font14)
        self.Message1.configure(foreground="#ffffff")
        self.Message1.configure(text='''The address resolution protocol (arp) is a protocol used by the Internet Protocol (IP) [RFC826], specifically IPv4, to map IP network addresses to the hardware addresses used by a data link protocol.''')
        self.Message1.configure(width=162)

        self.Message2 = tk.Message(top)
        self.Message2.place(relx=0.813, rely=0.603, relheight=0.325
                , relwidth=0.169)
        self.Message2.configure(background="#000000")
        self.Message2.configure(font=font14)
        self.Message2.configure(foreground="#ffffff")
        self.Message2.configure(text='''hping is a TCP/IP packet assembler/analyzer.It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features''')
        self.Message2.configure(width=152)

        self.Message3 = tk.Message(top)
        self.Message3.place(relx=0.223, rely=0.603, relheight=0.327
                , relwidth=0.149)
        self.Message3.configure(background="#020202")
        self.Message3.configure(font=font14)
        self.Message3.configure(foreground="#ffffff")
        self.Message3.configure(text='''TCPdump is a powerful command-line packet analyzer; and libpcap, a portable C/C++ library for network traffic capture.''')
        self.Message3.configure(width=134)

        self.Message4 = tk.Message(top)
        self.Message4.place(relx=0.401, rely=0.603, relheight=0.325
                , relwidth=0.171)
        self.Message4.configure(background="#000000")
        self.Message4.configure(font=font14)
        self.Message4.configure(foreground="#ffffff")
        self.Message4.configure(text='''netstat (network statistics) is a network utility that displays network connections for TCP(both incoming and outgoing), routing tables, and a number of network interface and network protocol statistics.''')
        self.Message4.configure(width=154)

        self.Message5 = tk.Message(top)
        self.Message5.place(relx=0.601, rely=0.603, relheight=0.333
                , relwidth=0.194)
        self.Message5.configure(background="#020202")
        self.Message5.configure(font=font14)
        self.Message5.configure(foreground="#ffffff")
        self.Message5.configure(text='''nslookup is a network administration tool available in many computer operating systems for querying the Domain Name System (DNS) to obtain domain name or IP address mapping, or other DNS records. The name "nslookup" means "name server lookup".''')
        self.Message5.configure(width=174)

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.post(event.x_root, event.y_root)

    @staticmethod
    def popup2(event, *args, **kwargs):
        Popupmenu2 = tk.Menu(root, tearoff=0)
        Popupmenu2.configure(activebackground="#f9f9f9")
        Popupmenu2.post(event.x_root, event.y_root)

if __name__ == '__main__':
    vp_start_gui()





